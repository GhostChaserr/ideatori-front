[{"/Users/george/Documents/projects/ideatori/ideatori-front/src/App.tsx":"1","/Users/george/Documents/projects/ideatori/ideatori-front/src/config/index.ts":"2","/Users/george/Documents/projects/ideatori/ideatori-front/src/reportWebVitals.ts":"3","/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/index.ts":"4","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Home/index.ts":"5","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Home/Home.tsx":"6","/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/Router.tsx":"7","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignUp/SignUp.tsx":"8","/Users/george/Documents/projects/ideatori/ideatori-front/src/components/PasswordInput/PasswordInput.tsx":"9","/Users/george/Documents/projects/ideatori/ideatori-front/src/index.tsx":"10","/Users/george/Documents/projects/ideatori/ideatori-front/src/services/apollo.service.ts":"11","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignIn/SignIn.tsx":"12","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignIn/index.ts":"13","/Users/george/Documents/projects/ideatori/ideatori-front/src/gql/user/index.ts":"14","/Users/george/Documents/projects/ideatori/ideatori-front/src/services/user.service.ts":"15","/Users/george/Documents/projects/ideatori/ideatori-front/src/helpers/global.helpers.ts":"16","/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/Private.tsx":"17","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Profile/Profile.tsx":"18","/Users/george/Documents/projects/ideatori/ideatori-front/src/components/IdeaDrawer/IdeaDrawer.tsx":"19","/Users/george/Documents/projects/ideatori/ideatori-front/src/context/AuthContex.tsx":"20","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Profile/index.ts":"21","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignUp/index.ts":"22","/Users/george/Documents/projects/ideatori/ideatori-front/src/helpers/index.ts":"23","/Users/george/Documents/projects/ideatori/ideatori-front/src/components/Idea/Idea.tsx":"24","/Users/george/Documents/projects/ideatori/ideatori-front/src/components/IdeaDrawer/index.ts":"25"},{"size":732,"mtime":1610137869527,"results":"26","hashOfConfig":"27"},{"size":279,"mtime":1610103426153,"results":"28","hashOfConfig":"27"},{"size":425,"mtime":1610101646827,"results":"29","hashOfConfig":"27"},{"size":34,"mtime":1610103633854,"results":"30","hashOfConfig":"27"},{"size":32,"mtime":1610103587649,"results":"31","hashOfConfig":"27"},{"size":237,"mtime":1610131907597,"results":"32","hashOfConfig":"27"},{"size":1114,"mtime":1610135350753,"results":"33","hashOfConfig":"27"},{"size":4783,"mtime":1610134930287,"results":"34","hashOfConfig":"27"},{"size":780,"mtime":1610108258222,"results":"35","hashOfConfig":"27"},{"size":472,"mtime":1610139373731,"results":"36","hashOfConfig":"27"},{"size":696,"mtime":1610131396958,"results":"37","hashOfConfig":"27"},{"size":3232,"mtime":1610134782623,"results":"38","hashOfConfig":"27"},{"size":34,"mtime":1610108872671,"results":"39","hashOfConfig":"27"},{"size":205,"mtime":1610131291461,"results":"40","hashOfConfig":"27"},{"size":227,"mtime":1610129720009,"results":"41","hashOfConfig":"27"},{"size":545,"mtime":1610133470664,"results":"42","hashOfConfig":"27"},{"size":559,"mtime":1610133923129,"results":"43","hashOfConfig":"27"},{"size":516,"mtime":1610139906008,"results":"44","hashOfConfig":"27"},{"size":3496,"mtime":1610139651510,"results":"45","hashOfConfig":"27"},{"size":213,"mtime":1610130799969,"results":"46","hashOfConfig":"27"},{"size":35,"mtime":1610135329143,"results":"47","hashOfConfig":"27"},{"size":34,"mtime":1610103352777,"results":"48","hashOfConfig":"27"},{"size":59,"mtime":1610133317798,"results":"49","hashOfConfig":"27"},{"size":281,"mtime":1610140066212,"results":"50","hashOfConfig":"27"},{"size":38,"mtime":1610137156940,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15v6p5b",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/george/Documents/projects/ideatori/ideatori-front/src/App.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/config/index.ts",[],["110","111"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/reportWebVitals.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/index.ts",[],["112","113"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Home/index.ts",[],["114","115"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Home/Home.tsx",["116","117"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/Router.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignUp/SignUp.tsx",["118"],"import React, { useContext, useState } from 'react'\nimport {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Flex,\n  Box,\n  Container,\n  Button,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react'\n\nimport PasswordInput from 'components/PasswordInput'\nimport { useForm } from 'react-hook-form'\nimport { useSignUp } from 'services/user.service'\nimport { useApolloClient } from '@apollo/client'\nimport { MeQuery } from 'gql/user'\nimport AuthContext from 'context/AuthContex'\nimport { SignUpPayload } from './SignUpTypes'\nimport { IAuthContext } from 'context/interface'\nimport { globalHelpers } from 'helpers'\nimport { useHistory } from 'react-router-dom'\n\nconst SignUp = () => {\n  const history = useHistory()\n  const [errMsg, setErrMsg] = useState<string>('')\n  const { setContext } = useContext<IAuthContext>(AuthContext)\n  const signUp = useSignUp()\n  const apolloClient = useApolloClient()\n  const [loading, setLoading] = useState<boolean>(false)\n  const { register, handleSubmit, watch, errors } = useForm()\n\n  const onSubmit = async ({\n    name,\n    email,\n    password,\n    repeatPassword,\n    lastName\n  }: SignUpPayload) => {\n    try {\n      setLoading(true)\n\n      if (password !== repeatPassword) {\n        setLoading(false)\n        setErrMsg('Passwords do not match!')\n        setTimeout(() => setErrMsg(''), 2000)\n        return\n      }\n\n      if (password.length < 8) {\n        setLoading(false)\n        setErrMsg('Password length must be at least 8 characters long!')\n        setTimeout(() => setErrMsg(''), 2000)\n        return\n      }\n\n      let response = await signUp({\n        variables: {\n          name,\n          lastName,\n          email,\n          password\n        }\n      })\n\n      localStorage.setItem('token', response.data.signUp.accessToken)\n      response = await apolloClient.query({ query: MeQuery })\n      setContext({ isAuthed: true, user: response.data.me })\n      setLoading(false)\n      history.push('/profile')\n    } catch (error) {\n      setLoading(false)\n      const { message } = globalHelpers.formatErrors(error)\n      setErrMsg(message)\n      setTimeout(() => setErrMsg(''), 2000)\n    }\n  }\n\n  return (\n    <Container maxW='xl'>\n      {errMsg && (\n        <Alert status='error'>\n          <AlertIcon />\n          {errMsg}\n        </Alert>\n      )}\n      <Flex flexDirection='column'>\n        <form noValidate onSubmit={handleSubmit(onSubmit)}>\n          <Box mb='5' mt='5'>\n            <FormControl id='name'>\n              <FormLabel>First name</FormLabel>\n              <Input\n                isInvalid={errors.name ? true : false}\n                name='name'\n                ref={register({ required: true })}\n                size='lg'\n                placeholder='First name'\n              />\n            </FormControl>\n          </Box>\n          <Box mb='5' mt='5'>\n            <FormControl id='lastName'>\n              <FormLabel>First name</FormLabel>\n              <Input\n                isInvalid={errors.lastName ? true : false}\n                name='lastName'\n                ref={register({ required: true })}\n                size='lg'\n                placeholder='First name'\n              />\n            </FormControl>\n          </Box>\n          <Box mb='5' mt='5'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input\n                isInvalid={errors.email ? true : false}\n                name='email'\n                ref={register({ required: true })}\n                size='lg'\n                type='email'\n              />\n              <FormHelperText>We'll never share your email.</FormHelperText>\n            </FormControl>\n          </Box>\n          <Box mb='5' mt='5'>\n            <FormLabel> Password </FormLabel>\n            <PasswordInput\n              isInvalid={errors.email ? true : false}\n              ref={register({ required: true })}\n              name='repeatPassword'\n            />\n          </Box>\n          <Box mb='5' mt='5'>\n            <FormLabel>Repeat password </FormLabel>\n            <PasswordInput\n              isInvalid={errors.email ? true : false}\n              ref={register({ required: true })}\n              name='password'\n            />\n          </Box>\n          <Box\n            d='flex'\n            flexDirection='row'\n            justifyContent='flex-end'\n            borderColor='red'\n            mb='5'\n            mt='8'\n          >\n            <Button\n              type='submit'\n              p='5'\n              width='200px'\n              isLoading={loading}\n              loadingText='Submitting'\n              colorScheme='teal'\n              variant='outline'\n            >\n              Signup\n            </Button>\n          </Box>\n        </form>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default SignUp\n","/Users/george/Documents/projects/ideatori/ideatori-front/src/components/PasswordInput/PasswordInput.tsx",["119"],"import {\n  InputGroup,\n  Input,\n  InputRightElement,\n  Button,\n  FormLabel\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PasswordInput = React.forwardRef((props: any, ref: any) => {\n  const [show, setShow] = React.useState(false)\n  const handleClick = () => setShow(!show)\n  return (\n    <InputGroup size='lg'>\n      <Input\n        isInvalid={props.isInvalid}\n        ref={ref}\n        name={props.name}\n        pr='4.5rem'\n        type={show ? 'text' : 'password'}\n        placeholder='Enter password'\n        size='lg'\n      />\n      <InputRightElement width='4.5rem'>\n        <Button h='1.75rem' size='sm' onClick={handleClick}>\n          {show ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n})\n\nexport default PasswordInput\n","/Users/george/Documents/projects/ideatori/ideatori-front/src/index.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/services/apollo.service.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignIn/SignIn.tsx",["120","121","122","123"],"import React, { useContext, useState } from 'react'\nimport {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Flex,\n  Box,\n  Container,\n  Button,\n  Alert,\n  AlertIcon,\n  AlertTitle\n} from '@chakra-ui/react'\nimport PasswordInput from 'components/PasswordInput'\nimport { useForm } from 'react-hook-form'\nimport { useSignIn } from 'services/user.service'\nimport AuthContext from 'context/AuthContex'\nimport { useApolloClient } from '@apollo/client'\nimport { MeQuery } from 'gql/user'\nimport { useHistory } from 'react-router-dom'\nimport { SignInPayload } from './SignInTypes'\nimport { globalHelpers } from 'helpers'\n\nconst SignIn = () => {\n  const history = useHistory()\n  const [errMsg, setErrMsg] = useState<string>('')\n  const apolloClient = useApolloClient()\n  const { setContext } = useContext(AuthContext)\n  const signIn = useSignIn()\n  const [loading, setLoading] = useState<boolean>(false)\n  const [submitted, setSubmitted] = useState<boolean>(false)\n  const { register, handleSubmit, watch, errors } = useForm()\n\n  const onSubmit = async ({ email, password }: SignInPayload) => {\n    try {\n      setLoading(true)\n      let response = await signIn({\n        variables: {\n          email,\n          password\n        }\n      })\n\n      localStorage.setItem('token', response.data.signIn.accessToken)\n      response = await apolloClient.query({ query: MeQuery })\n      setContext({ isAuthed: true, user: response.data.me })\n      setLoading(false)\n      history.push('/profile')\n    } catch (error) {\n      setLoading(false)\n      const { message } = globalHelpers.formatErrors(error)\n      setErrMsg(message)\n      setTimeout(() => setErrMsg(''), 2000)\n    }\n  }\n\n  return (\n    <Container maxW='xl'>\n      {errMsg && (\n        <Alert status='error'>\n          <AlertIcon />\n          {errMsg}\n        </Alert>\n      )}\n      <Flex flexDirection='column'>\n        <form noValidate onSubmit={handleSubmit(onSubmit)}>\n          <Box mb='5' mt='5'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input\n                isInvalid={errors.email ? true : false}\n                name='email'\n                ref={register({ required: true })}\n                size='lg'\n                type='email'\n              />\n              <FormHelperText>We'll never share your email.</FormHelperText>\n            </FormControl>\n          </Box>\n          <Box mb='5' mt='5'>\n            <FormLabel> Password </FormLabel>\n            <PasswordInput\n              isInvalid={errors.email ? true : false}\n              ref={register({ required: true })}\n              name='password'\n            />\n          </Box>\n          <Box\n            d='flex'\n            flexDirection='row'\n            justifyContent='flex-end'\n            borderColor='red'\n            mb='5'\n            mt='8'\n          >\n            <Button\n              type='submit'\n              p='5'\n              width='200px'\n              isLoading={loading}\n              loadingText='Submitting'\n              colorScheme='teal'\n              variant='outline'\n            >\n              Signin\n            </Button>\n          </Box>\n        </form>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default SignIn\n","/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignIn/index.ts",[],["124","125"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/gql/user/index.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/services/user.service.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/helpers/global.helpers.ts",["126"],"/Users/george/Documents/projects/ideatori/ideatori-front/src/Router/Private.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Profile/Profile.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/components/IdeaDrawer/IdeaDrawer.tsx",["127","128"],"import React from 'react'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Textarea,\n  Box,\n  FormLabel,\n  Button,\n  useDisclosure,\n  Input,\n  Select,\n  FormHelperText\n} from '@chakra-ui/react'\n\nimport { useForm } from 'react-hook-form'\nimport { IdeaDrawerProps } from './IdeaDrawerTypes'\n\nfunction IdeaDrawer({ update, data }: IdeaDrawerProps) {\n  const { register, handleSubmit, watch, errors } = useForm()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n  const onSubmit = (data: any) => {\n    console.log(data)\n  }\n\n  return (\n    <>\n      <Button colorScheme='teal' onClick={onOpen}>\n        Write new idea\n      </Button>\n      <Drawer size='xl' isOpen={isOpen} placement='right' onClose={onClose}>\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader>Create your account</DrawerHeader>\n            <form noValidate onSubmit={handleSubmit(onSubmit)}>\n              <DrawerBody>\n                <Box>\n                  <Box mt='5' mb='5'>\n                    <FormLabel>Name the idea</FormLabel>\n                    <Input\n                      isInvalid={errors.name ? true : false}\n                      name='name'\n                      ref={register({ required: true })}\n                      size='lg'\n                      type='text'\n                    />\n                  </Box>\n                  <Box mt='5' mb='5'>\n                    <FormLabel>Publish your first idea</FormLabel>\n                    <Textarea\n                      name='summary'\n                      ref={register({ required: true })}\n                      size='lg'\n                      rows={5}\n                      placeholder='Write your new idea here'\n                    />\n                  </Box>\n                  <Box mt='5' mb='5'>\n                    <Select\n                      name='category'\n                      ref={register({ required: true })}\n                      size='lg'\n                      placeholder='Select category'\n                    >\n                      <option value='Startup'>Startup</option>\n                      <option value='Business'>Business</option>\n                      <option value='Discussion'>Discussion</option>\n                    </Select>\n                  </Box>\n                  <Box mt='5' mb='5'>\n                    <FormLabel> დაამატე საკვანძო სიტყვები </FormLabel>\n                    <Textarea\n                      name='keywords'\n                      ref={register}\n                      size='lg'\n                      rows={3}\n                    />\n                    <FormHelperText>\n                      სიტყვებს შორის დატოვე მძიმე.\n                    </FormHelperText>\n                  </Box>\n                </Box>\n              </DrawerBody>\n              <DrawerFooter>\n                <Button\n                  size='lg'\n                  type='submit'\n                  p='5'\n                  isLoading={false}\n                  loadingText='Submitting'\n                  colorScheme='teal'\n                  variant='outline'\n                >\n                  Publish\n                </Button>\n              </DrawerFooter>\n            </form>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  )\n}\n\nexport default IdeaDrawer\n","/Users/george/Documents/projects/ideatori/ideatori-front/src/context/AuthContex.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/Profile/index.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/pages/SignUp/index.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/helpers/index.ts",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/components/Idea/Idea.tsx",[],"/Users/george/Documents/projects/ideatori/ideatori-front/src/components/IdeaDrawer/index.ts",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"129","replacedBy":"135"},{"ruleId":"131","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":6,"column":11,"nodeType":"139","messageId":"140","endLine":6,"endColumn":19},{"ruleId":"137","severity":1,"message":"141","line":6,"column":21,"nodeType":"139","messageId":"140","endLine":6,"endColumn":25},{"ruleId":"137","severity":1,"message":"142","line":33,"column":35,"nodeType":"139","messageId":"140","endLine":33,"endColumn":40},{"ruleId":"137","severity":1,"message":"143","line":6,"column":3,"nodeType":"139","messageId":"140","endLine":6,"endColumn":12},{"ruleId":"137","severity":1,"message":"144","line":13,"column":3,"nodeType":"139","messageId":"140","endLine":13,"endColumn":13},{"ruleId":"137","severity":1,"message":"145","line":32,"column":10,"nodeType":"139","messageId":"140","endLine":32,"endColumn":19},{"ruleId":"137","severity":1,"message":"146","line":32,"column":21,"nodeType":"139","messageId":"140","endLine":32,"endColumn":33},{"ruleId":"137","severity":1,"message":"142","line":33,"column":35,"nodeType":"139","messageId":"140","endLine":33,"endColumn":40},{"ruleId":"129","replacedBy":"147"},{"ruleId":"131","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":23,"column":1,"nodeType":"151","endLine":23,"endColumn":32},{"ruleId":"137","severity":1,"message":"142","line":24,"column":35,"nodeType":"139","messageId":"140","endLine":24,"endColumn":40},{"ruleId":"137","severity":1,"message":"152","line":26,"column":9,"nodeType":"139","messageId":"140","endLine":26,"endColumn":15},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],["153"],["154"],["153"],["154"],"@typescript-eslint/no-unused-vars","'isAuthed' is assigned a value but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'watch' is assigned a value but never used.","'FormLabel' is defined but never used.","'AlertTitle' is defined but never used.","'submitted' is assigned a value but never used.","'setSubmitted' is assigned a value but never used.",["153"],["154"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'btnRef' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]